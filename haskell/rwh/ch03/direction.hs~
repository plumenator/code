import Data.List
import  Data.Ord

data Direction = LeftTurn | RightTurn | Straight deriving (Show, Eq)

type Point = (Double, Double)

turn :: Point -> Point -> Point -> Direction
turn (x0, y0) (x1, y1) (x2 ,y2) 
    | signedArea > 0 = LeftTurn
    | signedArea < 0 = RightTurn
    | otherwise = Straight
    where signedArea = ((x1 - x0) * (y2 - y0) - (x2 - x0) * (y1 - y0)) / 2

turns :: [Point] -> [Direction]
turns (x0:x1:x2:xs) = (turn x0 x1 x2):(turns (x1:x2:xs))
turns _ = []

pointEquals :: Point -> Point -> Bool
pointEquals (x0,y0) (x1,y1) = x0 == x1 && y0 == y1

southWestMost :: [Point] -> Point
southWestMost [x] = x
southWestMost (x:xs) = southWestOne x (southWestMost xs)
    where southWestOne (x0, y0) (x1, y1)
              | y0 < y1 = (x0, y0)
              | y0 == y1 && x0 < x1 = (x0, y0)
              | otherwise = (x1, y1)

filterRightTurns :: [Point] -> [Point]
filterRightTurns (x0:x1:x2:xs) 
    | (turn x0 x1 x2) == RightTurn = filterRightTurns (x0:x2:xs)
    | otherwise = x0:(filterRightTurns (x1:x2:xs))
filterRightTurns xs = xs

slope :: Point -> Point -> Double
slope (x1, y1) (x0, y0) =  (y1 - y0) / (x1 - x0)

convexHull :: [Point] -> [Point]
convexHull points = if (length newPoints) == (length points) then points else (convexHull newPoints)
    where convexHullIter points = filterRightTurns ((sortBy (comparing angleWithPivot) points))
          angleWithPivot a = - 1 / (slope a (southWestMost points))
          newPoints = convexHullIter points
          